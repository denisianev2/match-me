# DROP DATABASE IF EXISTS matching;
# CREATE DATABASE IF NOT EXISTS matching;

# /c matching;

# DROP TYPE IF EXISTS "user_type";
# DROP TYPE IF EXISTS "csap_track_type";
# DROP TYPE IF EXISTS "preference_type";
# DROP TYPE IF EXISTS "gender_type";
# DROP TYPE IF EXISTS "priority_column_type";

# DROP TABLE IF EXISTS "mentee";
# DROP TABLE IF EXISTS "profile";
# DROP TABLE IF EXISTS "users";
# DROP TABLE IF EXISTS "roles";
# DROP TABLE IF EXISTS "cities";
# DROP TABLE IF EXISTS "countries";
# DROP TABLE IF EXISTS "theatres";

# CREATE TYPE "user_type" AS ENUM (
#   'mentor',
#   'mentee'
# );

from enum import Enum
from dataclasses import dataclass


class ExtendedEnum(Enum):
    @classmethod
    def list(cls):
        return list(map(lambda c: c.name, cls))


UserType = ExtendedEnum("UserType", ["mentor", "mentee"])

# CREATE TYPE "csap_track_type" AS ENUM (
#   'engineer',
#   'sales'
# );

CSAPTrackType = ExtendedEnum("CSAPTrackType", ["engineer", "sales"])

# CREATE TYPE "preference_type" AS ENUM (
#   'yes',
#   'no',
#   'no_preference'
# );

PreferenceType = ExtendedEnum("PreferenceType", ["yes", "no", "no_preference"])

# CREATE TYPE "gender_type" AS ENUM (
#   'male',
#   'female',
#   'other'
# );

GenderType = ExtendedEnum("GenderType", ["male", "female", "other"])

# CREATE TYPE "priority_column_type" AS ENUM (
#   'role',
#   'strengths',
#   'gender',
#   'theater',
#   'none'
# );

PriorityColumnType = ExtendedEnum(
    "PriorityColumnType", ["role", "strength", "gender", "theater", "none"]
)

# CREATE TABLE "users" (
#   "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
#   "email" varchar,
#   "password_hash" varchar,
#   "type" user_type
# );


class User:
    def __init__(self, id, email, password_hash, type):
        self.id = id
        self.email = email
        self.password_hash = password_hash
        self.type = type


class Mentee:
    def __init__(self, id, user_id, mentor_id):
        self.id = id
        self.user_id = user_id
        self.mentor_id = mentor_id


class GenericRow:
    def __init__(self, id: int, name: str):
        self.id = id
        self.name = name


class Profile:
    def __init__(
        self,
        id: int,
        user_id: int,
        role_id: int,
        title: str,
        gender_id: int,
        city_id: int,
        country_id: int,
        theatre_id: int,
        bio: str,
        csap_track: CSAPTrackType,
        same_theater: PreferenceType,
        same_gender: PreferenceType,
        same_role: PreferenceType,
        first_priority: PriorityColumnType,
        second_priority: PriorityColumnType,
        strengths: list[GenericRow],
        interests: list[GenericRow],
    ):
        self.id = id
        self.user_id = user_id
        self.role_id = role_id
        self.title = title
        self.gender_id = gender_id
        self.city_id = city_id
        self.country_id = country_id
        self.theatre_id = theatre_id
        self.bio = bio
        self.csap_track = csap_track
        self.same_theater = same_theater
        self.same_gender = same_gender
        self.same_role = same_role
        self.first_priority = first_priority
        self.second_priority = second_priority
        self.strengths = strengths
        self.interests = interests


class ProfileUser:
    def __init__(self, user: User, profile: Profile):
        self.user = user
        self.profile = profile


class MenteeUser(ProfileUser):
    def __init__(self, user: User, mentee: Mentee, profile: Profile):
        super().__init__(user, profile)
        self.profile = profile


class MentorUser(ProfileUser):
    def __init__(self, user: User, profile: Profile):
        super().__init__(user, profile)
